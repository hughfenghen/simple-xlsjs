{"version":3,"sources":["index.ts"],"names":[],"mappings":";AAkGA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,QAAA,YAAA,EAlGA,IAAA,EAAA,EAAA,QAAA,SAMA,SAAgB,EAAe,GACzB,MAAgB,iBAAT,EACF,QAAQ,QAAQ,EAAA,QAAK,SAAS,IAGhC,IAAI,QAAQ,SAAC,GACZ,IAAA,EAAqB,IAAI,WAE/B,EAAO,OAAS,SAAU,GAClB,IAAA,EAAO,IAAI,WAAwB,EAAO,QAC1C,EAAW,EAAA,QAAK,KAAK,EAAM,CAAE,KAAM,UACzC,EAAQ,IAGV,EAAO,kBAAkB,KAS7B,SAAgB,EACd,EACA,GAEI,IAAA,EAA4B,iBAAd,EACd,EACA,EAAG,WAAW,GAEX,OAAA,EAAG,OAAO,GAanB,SAAgB,EACd,EACA,GAEM,IAAA,EAAM,EAAW,EAAO,CAAE,OAAQ,MACpC,GAAkB,iBAAX,EACF,OAAA,EAAI,IAAI,SAAC,GAAO,OAAA,EAAG,KAEtB,IAAA,EAAO,OAAO,KAAK,GAClB,OAAA,EAAI,IAAI,SAAC,GACR,IAAA,EAAS,GAIR,OAHP,EAAK,QAAQ,SAAC,GACZ,EAAO,EAAO,IAAM,EAAG,KAElB,IAcX,SAAgB,EAAW,EAA8B,GACnD,MAAgB,iBAAT,GACD,EAAM,IAAS,IAAI,EAEtB,EAAK,IAAI,SAAC,GAAM,OAAC,EAAM,IAAM,IAAI,IAO1C,SAAgB,EAAa,GACpB,OAAA,EAAW,EAAO,CAAE,OAAQ,IAQrC,SAAgB,EAAW,EAAmB,GACrC,OAAA,EAAA,QAAK,MAAM,cAAc,EAAO,GA7FzC,QAAA,eAAA,EAuBA,QAAA,YAAA,EAqBA,QAAA,aAAA,EA4BA,QAAA,WAAA,EAWA,QAAA,aAAA,EASA,QAAA,WAAA","file":"index.js","sourceRoot":"..","sourcesContent":["import XLSX from 'xlsx';\n\n/**\n * 从input中加载 WorkBook\n * @param file input获取的File对象\n */\nexport function loadWbFromFile(file: File | string): Promise<XLSX.WorkBook> {\n  if (typeof file === 'string') {\n    return Promise.resolve(XLSX.readFile(file))\n  }\n\n  return new Promise((resolve) => {\n    const reader: FileReader = new FileReader();\n    \n    reader.onload = function (e) {\n      const data = new Uint8Array(<ArrayBuffer>reader.result);\n      const workbook = XLSX.read(data, { type: 'array' });\n      resolve(workbook)\n    };\n   \n    reader.readAsArrayBuffer(file);\n  })\n}\n\n/**\n * 从 WorkBook 中获取 Sheet\n * @param sheetFlag 可以是sheet名称或索引\n * @param wb WorkBook\n */\nexport function selectSheet(\n  sheetFlag: number | string, \n  wb: XLSX.WorkBook\n): XLSX.Sheet {\n  let name = typeof sheetFlag === 'string'\n    ? sheetFlag\n    : wb.SheetNames[sheetFlag]\n  \n  return wb.Sheets[name]\n}\n\n/**\n * 获取某一列或多列的值\n * @param colKey column key or column keyMap\n * @param sheet Sheet\n * example: \n *  selectColumn('A', sheet) => [1, 2, 3]\n *  selectColumn({ A: code }, sheet) => [{ code: 1 }, { code: 2 }, { code: 3 }]\n */\nexport function selectColumn(colKey: string, sheet: XLSX.Sheet): Array<any>\nexport function selectColumn(colKey: object, sheet: XLSX.Sheet): Array<object>\nexport function selectColumn(\n  colKey: string | object,\n  sheet: XLSX.Sheet\n) {\n  const arr = sheet2JSON(sheet, { header: 'A' })\n  if (typeof colKey === 'string') {\n    return arr.map((it) => it[colKey])\n  }\n  const keys = Object.keys(colKey)\n  return arr.map((it) => {\n    const rowObj = {}\n    keys.forEach((k) => {\n      rowObj[colKey[k]] = it[k]\n    })\n    return rowObj\n  })\n}\n\n/**\n * 获取单元格的值\n * @param cell 单元格\n * @param sheet Sheet\n * example：\n *  selectCell('A1', sheet) => 1\n *  selectCell(['A1', 'A2', 'A3'], sheet) => [1, 2, 3]\n */\nexport function selectCell(cell: string, sheet: XLSX.Sheet): any;\nexport function selectCell(cell: Array<string>, sheet: XLSX.Sheet): Array<any> \nexport function selectCell(cell: string | Array<string>, sheet: XLSX.Sheet) {\n  if (typeof cell === 'string') {\n    return (sheet[cell] || {}).v\n  }\n  return cell.map((c) => (sheet[c] || {}).v)\n}\n\n/**\n * 获取所有行的值\n * @param sheet Sheet\n */\nexport function allRowValues(sheet: XLSX.Sheet): Array<any> {\n  return sheet2JSON(sheet, { header: 1 })\n}\n\n/**\n * Sheet to JSON\n * @param sheet Sheet\n * @param format 参考 https://docs.sheetjs.com/#json\n */\nexport function sheet2JSON(sheet: XLSX.Sheet, format?: object):Array<object> {\n  return XLSX.utils.sheet_to_json(sheet, format)\n}\n"]}